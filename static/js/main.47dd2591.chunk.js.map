{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","setBusqueda","setConsulta","useState","error","setError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","Number","type","id","onChange","htmlFor","Clima","busquedaResuktado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consulta","setbusquedaResultado","useEffect","a","url","fetch","json","respuesta","cod","consultarApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.47dd2591.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ titulo }) => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper light-blue darken-2\">\r\n        <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Error = ({ mensaje }) => {\r\n  return (\r\n    <p className=\"red darken-4 error\"> {mensaje} </p>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Error;","import React, { useState, } from 'react';\r\nimport Error from './Error'\r\n\r\n\r\nconst Formulario = ({ busqueda, setBusqueda, setConsulta }) => {\r\n  const [error, setError] = useState(false)\r\n\r\n\r\n  const { ciudad, pais } = busqueda\r\n\r\n  const handleChange = e => {\r\n    setBusqueda({\r\n      ...busqueda,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  // validar\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if (ciudad.trim() === \"\" || ciudad.trim() === Number || pais.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    setConsulta(true)\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n    >\r\n\r\n\r\n      {error ? <Error mensaje=\"tods los campos son Obligatorios\" /> : null}\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          name=\"ciudad\"\r\n          type=\"text\"\r\n          id=\"ciudad\"\r\n          value={ciudad}\r\n          onChange={handleChange}\r\n        />\r\n        <label htmlFor=\"ciudad\">Ciudad: </label>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <select\r\n          name=\"pais\"\r\n          id=\"pais\"\r\n          value={pais}\r\n          onChange={handleChange}\r\n        >\r\n          <option value=\"\">--Selecciones un pais--</option>\r\n          <option value=\"US\">Estados Unidos</option>\r\n          <option value=\"MX\">México</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"CR\">Costa Rica</option>\r\n          <option value=\"ES\">España</option>\r\n          <option value=\"PE\">Perú</option>\r\n        </select>\r\n        <label htmlFor=\"pais\">Pais: </label>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <button\r\n          type=\"submit\"\r\n          className=\"waves-effect waves-light btn-large btn-block yellow accent-4 col s12\"\r\n        >Buscar Clima</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\nexport default Formulario;\r\n\r\n","import React from 'react'\r\n\r\nconst Clima = ({ busquedaResuktado }) => {\r\n\r\n\r\n  const { name, main } = busquedaResuktado\r\n\r\n  if (!name) return null;\r\n\r\n  // Grados kelvin\r\n  const kelvin = 273.15;\r\n\r\n  return (\r\n    <div className=\"card-panel white col s12\">\r\n      <div className=\"black-text\">\r\n        <h2>El clima de {name} es: </h2>\r\n        <p className=\"temperatura\">\r\n          {parseFloat(main.temp - kelvin, 10).toFixed(2)}  <span> &#x2103; </span>\r\n        </p>\r\n        <p>Temperatura Máxima:\r\n                    {parseFloat(main.temp_max - kelvin, 10).toFixed(2)}  <span> &#x2103; </span>\r\n        </p>\r\n        <p>Temperatura Minima:\r\n                    {parseFloat(main.temp_min - kelvin, 10).toFixed(2)}  <span> &#x2103; </span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clima;","import React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario'\nimport Clima from './components/Clima'\nimport Error from './components/Error'\n\nfunction App() {\n  const [busqueda, setBusqueda] = useState({\n    ciudad: '',\n    pais: ''\n  })\n  const [consulta, setConsulta] = useState(false)\n  const [error, setError] = useState(false)\n\n  const [busquedaResuktado, setbusquedaResultado] = useState({})\n  const { ciudad, pais } = busqueda\n  useEffect(() => {\n\n\n    const consultarApi = async () => {\n\n      if (consulta) {\n        const apiKey = '63f3ac0aa273788de412b5ffed424112'\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${apiKey}`\n        const consulta = await fetch(url);\n        const respuesta = await consulta.json()\n        setbusquedaResultado(respuesta)\n\n        // verifica si hay erro en la consulta\n\n        if (respuesta.cod === \"404\") {\n          setError(true)\n        } else {\n          setError(false)\n        }\n      }\n    }\n\n\n    consultarApi()\n    setConsulta(false)\n    // eslint-disable-next-line\n  }, [consulta])\n\n  // cargar condicional\n  let componente;\n  if (error) {\n    componente = <Error mensaje=\"No hay resultados\" />\n  } else {\n    componente = <Clima\n      busquedaResuktado={busquedaResuktado} />\n  }\n  return (\n    <Fragment>\n      <Header\n        titulo={'Climar React App'}\n      />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                busqueda={busqueda}\n                setBusqueda={setBusqueda}\n                setConsulta={setConsulta}\n\n\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}